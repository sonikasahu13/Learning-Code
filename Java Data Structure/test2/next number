Next Number
Send Feedback
Given a large number represented in the form of a linked list. Write code to increment the number by 1 in-place(i.e. without using extra space).
Note: You don't need to print the elements, just update the elements and return the head of updated LL.
Input Constraints:
1 <= Length of Linked List <=10^6.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Output Format :
Line 1: Updated linked list elements 
Sample Input 1 :
3 9 2 5 -1
Sample Output 1 :
3 9 2 6
Sample Input 2 :
9 9 9 -1
Sample Output 1 :
1 0 0 0 

import java.util.Scanner;

class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;
	
	public LinkedListNode(T data) {
		this.data = data;
	}
}
public class Runner {
	static Scanner s = new Scanner(System.in);

	public static LinkedListNode<Integer> takeInput() {
		LinkedListNode<Integer> head = null, tail = null;
		int data = s.nextInt();
		while(data != -1) {
			LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
			if(head == null) {
				head = newNode;
				tail = newNode;
			}
			else {
				tail.next = newNode;
				tail = newNode;
			}
			data = s.nextInt();
		}
		return head;
	}
	
	public static void print(LinkedListNode<Integer> head){
		while(head != null){
			System.out.print(head.data +" ");
			head = head.next;
		}
		System.out.println();
	}
		
	public static void main(String[] args) {
		
		LinkedListNode<Integer> head = takeInput();
		head = Solution.nextLargeNumber(head);
		print(head);
		
	}

}

/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public LinkedListNode(T data) {
		this.data = data;
	}
}
 ***************/
import java.util.*;
public class Solution {


	//public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
    public static LinkedListNode<Integer> newNode(int data){
		LinkedListNode<Integer> new_node = new LinkedListNode<Integer>(data);  
	    new_node.data = data;  
	    new_node.next = null;  
	    return new_node;
	}
    public static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head){
		LinkedListNode<Integer> prev = null;
		LinkedListNode<Integer> current = head;
		LinkedListNode<Integer> next = null;
		while (current != null) {
			next = current.next;  
	        current.next = prev;  
	        prev = current;  
	        current = next;
		}
		return prev;
	}
	public static LinkedListNode<Integer> addOne(LinkedListNode<Integer> head){
		   LinkedListNode<Integer> res = head;
		   LinkedListNode<Integer> temp = null;
		   LinkedListNode<Integer> prev = null;
		   int sum, carry = 1;
		   while (head != null) {
			   sum = carry+head.data;
			   carry = (sum >= 10)? 1 : 0;
			   sum = sum % 10;
			   head.data = sum;
			   temp = head;  
		       head = head.next;
		   }
		   
		   if (carry > 0) { 
		        temp.next = newNode(carry);
           }
		   return res;		
	}


	public static LinkedListNode<Integer> nextLargeNumber(LinkedListNode<Integer> head) {
        if (head == null){
            return null;
        }
        head = reverse(head);
		head = addOne(head);
		return reverse(head);
   

	}


}
