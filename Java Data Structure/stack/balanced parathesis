Code : Balanced Parenthesis
Send Feedback
Given a string expression, check if brackets present in the expression are balanced or not. Brackets are balanced if the bracket which opens last, closes first.
You need to return true if it is balanced, false otherwise.
Note: This problem was asked in initial rounds in Facebook
Sample Input 1 :
{ a + [ b+ (c + d)] + (e + f) }
Sample Output 1 :
true
Sample Input 2 :
{ a + [ b - c } ]
Sample Output 2 :
false

import java.util.Scanner;

public class Main {

	static Scanner s = new Scanner(System.in);
	
	public static void main(String[] args) {
		String input = s.nextLine();
		System.out.println(Solution.checkBalanced(input));
	}
}

import java.util.*;
public class Solution {

	public static boolean checkBalanced(String exp) {
		// Write your code here
        Stack<Character> s=new Stack<Character>();
        for(int i=0;i<exp.length();i++)
        {
            if(exp.charAt(i)=='(' || exp.charAt(i)=='{' || exp.charAt(i)=='['){
                s.push(exp.charAt(i));
        }
        else if(exp.charAt(i)==')'||exp.charAt(i)=='}'|| exp.charAt(i)==']'){
            if(s.isEmpty()){
                return false;
            }
            char ch=s.pop();
            if(exp.charAt(i)==')' && ch=='('){
                continue;
            }
            else if(exp.charAt(i)=='}'&& ch=='{'){
                continue;
            }
            else if(exp.charAt(i)==']'&& ch=='[')
            {
                continue;
            }
            else
            {
                return false;
            }
        }
    }
        if(s.isEmpty()){
            return true;
        }
        else{
            return false;
        }

	}
}
