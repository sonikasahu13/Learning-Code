Delete node (recursive)
Send Feedback
Given a linked list and a position i, delete the node of ith position from Linked List recursively.
If position i is greater than length of LL, then you should return the same LL without any change.
Indexing starts from 0. You don't need to print the elements, just delete the node and return the head of updated LL.
Input format :
Line 1 : Linked list elements (separated by space and terminated by -1)
Line 2 : Integer i (position)
Output format :
Updated LL elements (separated by space)
Sample Input 1 :
3 4 5 2 6 1 9 -1
3
Sample Output 1 :
3 4 5 6 1 9
Sample Input 2 :
3 4 5 2 6 1 9 -1
0
Sample Output 2 :
4 5 2 6 1 9

import java.util.Scanner;

class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;
	
	public LinkedListNode(T data) {
		this.data = data;
	}
}

public class Runner {
	
	static Scanner s = new Scanner(System.in);
	
	public static LinkedListNode<Integer> takeInput() {
		LinkedListNode<Integer> head = null, tail = null;
		int data = s.nextInt();
		while(data != -1) {
			LinkedListNode<Integer> newNode = new LinkedListNode<Integer>(data);
			if(head == null) {
				head = newNode;
				tail = newNode;
			}
			else {
				tail.next = newNode;
				tail = newNode;
			}
			data = s.nextInt();
		}
		return head;
	}
	
	public static void print(LinkedListNode<Integer> head){
		while(head != null){
			System.out.print(head.data +" ");
			head = head.next;
		}
		System.out.println();
	}
	
	public static void main(String[] args) {
		LinkedListNode<Integer> head = takeInput();
		int pos = s.nextInt();
		head = Solution.deleteIthNodeRec(head, pos);
		print(head);
	}
}

/*************** 
 * Following is the Node class already written 
class LinkedListNode<T> {
	T data;
	LinkedListNode<T> next;

	public Node(T data) {
		this.data = data;
	}
}
 ***************/

public class Solution {

	public static LinkedListNode<Integer> deleteIthNodeRec(LinkedListNode<Integer> head, int i){
		/* Your class should be named Solution
		 * Don't write main().
		 * Don't read input, it is passed as function argument.
		 * Return output and don't print it.
	 	 * Taking input and printing output is handled automatically.
		*/
        if(head==null){
          return null;
        }
      	//FINDING THE LENGTH OF THE LINKEDLIST
      	LinkedListNode<Integer> temp=head;
      	int actual_length=0;
      	while(temp!=null){
        	temp=temp.next;
          	actual_length++;
        }
      	//we got the actual length of LL 
      	//now the indexes we have assumed starts from 0 
      	// for input pattern 1 4 5 -1
		//3 
      	//so 3 is actually out of bound as we have assumed starting index :( as 0
      	//but actually acc to length wise calcultion it exists so we have to give condition
        //so that i(to be found) should be in the boundary
      	if(i>actual_length-1){
          return head;
        }	
      	temp=head;
      	if(i==0){
          head=temp.next;
          return head;
        }
		LinkedListNode<Integer> prev=null;
      	int len=0;
      
      	while(len<i){
          prev=temp;
          temp=temp.next;
          len++;
        }
      	prev.next=temp.next;
      	return head;
		
	}
}
